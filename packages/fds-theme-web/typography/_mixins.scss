@use 'sass:map';
@use 'sass:string';
@use 'sass:meta';
@use '@finastra/fds-tokens/dist/scss/typography';

/// Loads the typography's custom properties.
///
/// @example
///   .my-headline {
///      font: var(--fds-headline-1);
///   }
@mixin custom-properties() {
  @each $key, $value in typography.$tokens {
    @if $key != 'scale' {
      --fds-#{$key}: #{$value};
    }
  }
}

/// Loads the typography's helper classes.
///
/// @example
///   <p class="fds-body-2">Hello</p>
@mixin helper-classes() {
  @each $key in map.get(typography.$tokens, scale) {
    $letter-spacing: map.get(typography.$tokens, #{$key}-letter-spacing);

    .fds-#{$key} {
      font: var(--fds-#{$key}, #{typo-fallback($key)});
      letter-spacing: var(--fds-#{$key}-letter-spacing, $letter-spacing);
    }
  }
}

/// Apply typography style to a text
///
/// @example
///   .my-small-text {
///     @include fds.typography(caption)
///   }
///
/// @param {String} $style - any of the predefined style in Finastra's typo scale
@mixin typography($style) {
  font: var(--fds-#{$style}, #{typo-fallback($style)});
  letter-spacing: map.get(typography.$tokens, #{$style}-letter-spacing);
}

/// Returns a value for font
///
/// @param {Map} $typo-style - Map that includes font-related properties
@function typo-fallback($typo-style) {
  $font-weight: map.get(typography.$tokens, #{$typo-style}-font-weight);
  $font-size: map.get(typography.$tokens, #{$typo-style}-font-size);
  $line-height: map.get(typography.$tokens, #{$typo-style}-line-height);
  $font-family: map.get(typography.$tokens, #{$typo-style}-font-family);

  /* stylelint-disable-next-line scss/operator-no-newline-after */
  @return normal normal var(--fds-#{$typo-style}-font-weight, #{$font-weight}) var(--fds-#{$typo-style}-font-size, #{$font-size}) /
    var(--fds-#{$typo-style}-line-height, #{$line-height}) var(--fds-#{$typo-style}-font-family, #{$font-family});
}

// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
