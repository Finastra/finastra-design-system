name: Release WC
on:
  pull_request:
    branches:
      - master
    types: [closed]
    paths:
      - '.release_wc.txt'
jobs:
  publish:
    if: |
      github.event.pull_request.merged == true
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: https://check.npmjs.org/
      - name: Install dependencies
        run: npm ci
      - name: Build fds theme
        run: npm run build:fds-theme
      - name: Build web components
        run: npm run wc:build
      - name: Get Release Version
        run: |
          RELEASE_VERSION=$(node -p 'require("./lerna.json").version')
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Tag Check
        id: tag_check
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${RELEASE_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: pkgdeps/git-tag-action@v2
        with:
          version: ${{ env.RELEASE_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: 'wc'
      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: v${{ env.RELEASE_VERSION }}
          body: ''
          draft: false
          prerelease: true
      - name: Authenticate with Registry
        run: |
          echo "@finastra:registry=https://registry.npmjs.org/" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.FINASTRA_BOT_NPM_AUTH_TOKEN }}
      - name: Publish
        run: |
          npx lerna publish from-package --yes
