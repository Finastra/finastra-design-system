@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:map';
@use './variables';

/// Loads the spacing's custom properties on root.
///
/// @example
///   .my-container {
///      margin: var(--fds-spacing-2);
///      padding: var(--fds-spacing-1);
///   }
@mixin custom-properties() {
  :root {
    @each $key, $value in variables.$properties {
      --fds-#{$key}: #{$value};
    }
  }
}

/// Loads the spacing's helper classes using following format:
/// fds-{m|p}{t|b|r|l}-{spacing}
/// where
/// {m|p} is used respectively for margin or padding.
/// {t|b|r|l} is used for top, bottom, right or left.
/// Can be dismissed if spacing apply to all 4 sides.
/// {spacing} is the spacing value between 0 and 6.
///
/// @example
///   <div class="fds-mt-6">
///      <p>Hello</p>
///   </div>
///
/// @example
///   <div class="fds-p-2">
///      <span>some content</span>
///   </div>
@mixin helper-classes() {
  @each $key, $value in variables.$properties {
    @each $prop in 'margin', 'padding' {
      $length: string.length($key);
      .fds-#{string.slice($prop, 0, 1)}-#{string.slice($key, $length, $length + 1)} {
        #{$prop}: var(--fds-#{$key}, #{$value});
      }
      @each $side in variables.$sides {
        .fds-#{string.slice($prop, 0, 1)}#{string.slice($side, 0, 1)}-#{string.slice($key, $length, $length + 1)} {
          #{$prop}-#{$side}: var(--fds-#{$key}, #{$value});
        }
      }
    }
  }
}

/// Check if spacing is a unitless number between 0 and 6.
///
/// @param {*} $spacing - The value to validate
/// @return The same spacing passed in parameter if value is correct
@function _check-spacing($spacing) {
  @if meta.type-of($spacing) != number or not math.is-unitless($spacing) {
    @error "$spacing must be a unitless number, but received '#{$spacing}'";
  }

  @if $spacing < 0 or $spacing > 6 {
    @error "$spacing must be between 0 and 6, but received '#{$spacing}'";
  }

  @return $spacing;
}

/// Generates CSS to apply proper spacing
///
/// @param {String} $prop - The margin or the padding
/// @param {Number} $value - The spacing between 0 and 6
/// @param {String} $side - The side where to apply spacing
@mixin spacing($prop, $value, $side) {
  $spacing-name: 'spacing-'+$value;
  $spacing-value: map.get(variables.$properties, $spacing-name);
  
  @if (list.index(variables.$sides, $side)) {
    #{$prop}-#{$side}: var(--fds-spacing-#{_check-spacing($value)},#{$spacing-value});
  } @else if $side == '' {
    #{$prop}: var(--fds-spacing-#{_check-spacing($value)},#{$spacing-value});
  } @else {
    @error "$side must be one of [top, bottom, right, left], but received '#{$side}'";
  }
}

/// Generates CSS to apply proper margin
///
/// @param {Number} $value - The spacing between 0 and 6
/// @param {String} $side - The side where to apply margin (may be null)
@mixin margin($value, $side: '') {
  @include spacing(margin, $value, $side);
}

/// Generates CSS to apply proper padding
///
/// @param {Number} $value - The spacing between 0 and 6
/// @param {String} $side - The side where to apply padding (may be null)
@mixin padding($value, $side: '') {
  @include spacing(padding, $value, $side);
}
