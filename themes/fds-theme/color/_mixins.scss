@use 'sass:map';
@use './variables';

/// Loads the colors' custom properties on root.
///
/// @example
///   .my-container {
///      background: var(--fds-surface);
///      color: var(--fds-on-surface);
///   }
@mixin custom-properties() {
  :root {
    @each $style, $variable in variables.$properties {
      --fds-#{$style}: #{$variable};
    }
  }
}

/// Loads the colors' helper classes.
///
/// @example
///   <div class="fds-primary-bg">
///      <p class="fds-on-primary">Hello</p>
///   </div>
@mixin helper-classes() {
  @each $style, $value in variables.$properties {
    @if $style != 'background' and $style != 'surface' {
      .fds-#{$style} {
        color: var(--fds-#{$style});
      }
      .fds-#{$style}-bg {
        background: var(--fds-#{$style});
      }
    } @else {
      .fds-#{$style} {
        background: var(--fds-#{$style});
      }
    }
  }
}

/// Generates CSS to apply background color to a container.
///
/// @example
///   .my-primary-container {
///     @include fds.bg-color(primary);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin bg-color($style){
  $bg-color: map.get(variables.$properties, $style);
  background: var(--fds-#{$style}, #{$bg-color});
}

/// Generates CSS to apply color to a text.
///
/// @example
///   .my-error-text {
///     @include fds.text-color(error);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin text-color($style) {
  $bg-color: map.get(variables.$properties, $style);
  color: var(--fds-#{$style}, #{$bg-color});
}
