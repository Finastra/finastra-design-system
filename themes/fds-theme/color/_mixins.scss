@use 'sass:map';
@use 'sass:string';
@use './light';
@use './dark';
/// Loads the colors' custom properties.
///
/// @example
///   .my-container {
///      background: var(--fds-surface);
///      color: var(--fds-on-surface);
///   }
@mixin custom-properties($properties) {
  @each $style, $variable in $properties {
    --fds-#{$style}: #{$variable};
    --mdc-theme-#{$style}: var(--fds-#{$style});
  }
}

/// Use this mixin to include any content block inside your class or root.
@mixin wrap($class: null) {
  @if $class and $class != "root" and $class != ":root" {
    $class: is-valid-name($class);
    #{$class} {
      @content;
    }
  } @else {
    #{if(&, '&', ':root')} {
      @content;
    }
  }
}

/// Loads the light colors' custom properties inside your container .
///
/// @example
///   @use '@finastra/fds-theme' as fds;
///     .my-container {
///        @include fds.use-theme-light();
///      }
@mixin use-theme-light() {
  @include wrap() {
    @include custom-properties(light.$properties);
  }
}

/// Loads the dark colors' custom properties inside your container .
///
/// @example
///   @use '@finastra/fds-theme' as fds;
///     .my-container {
///        @include fds.use-theme-dark();
///      }
@mixin use-theme-dark() {
  @include wrap() {
    @include custom-properties(dark.$properties);
  }
}

/// Loads the colors' helper classes.
///
/// @example
///   <div class="fds-primary-bg">
///      <p class="fds-on-primary">Hello</p>
///   </div>
@mixin helper-classes() {
  @each $style, $value in light.$properties {
    $bg-color: map.get(light.$properties, $style);
    @if $style != "background" and $style != "surface" {
      .fds-#{$style} {
        color: var(--fds-#{$style}, #{$bg-color});
      }
      .fds-#{$style}-bg {
        background: var(--fds-#{$style}, #{$bg-color});
      }
    } @else {
      .fds-#{$style} {
        background: var(--fds-#{$style}, #{$bg-color});
      }
    }
  }
}

/// Generates CSS to apply background color to a container.
///
/// @example
///   .my-primary-container {
///     @include fds.bg-color(primary);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin bg-color($style) {
  $bg-color: map.get(light.$properties, $style);
  background: var(--fds-#{$style}, #{$bg-color});
}

/// Generates CSS to apply color to a text.
///
/// @example
///   .my-error-text {
///     @include fds.text-color(error);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin text-color($style) {
  $bg-color: map.get(light.$properties, $style);
  color: var(--fds-#{$style}, #{$bg-color});
}

/// Check if the class name is valid
@function is-valid-name($class) {
  @if $class == "" or $class == " " {
    @error "'#{$class}' name is empty";
  }

  @if string.index($class, ".") == 1 and string.length($class) <= 1 {
    @error "You must specify a name to your class";
  }

  @if string.index($class, ".") != 1 and $class != ":root" and $class != "root" {
    $class: "." + $class;
  }

  @return $class;
}
