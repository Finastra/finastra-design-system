@use 'sass:map';
@use 'sass:string';
@use './light';
@use './dark';
@use '../scheme';

/// Loads the colors' custom properties.
///
/// @example
///   .my-container {
///      background: var(--fds-surface);
///      color: var(--fds-on-surface);
///   }
@mixin custom-properties($scheme: scheme.light()) {
  $properties: if(scheme.isLight($scheme), light.$properties, dark.$properties);
  @each $style, $variable in $properties {
    --fds-#{$style}: #{$variable};
    --mdc-theme-#{$style}: var(--fds-#{$style}, #{$variable});
  }
}

/// Loads the colors' helper classes.
///
/// @example
///   <div class="fds-primary-bg">
///      <p class="fds-on-primary">Hello</p>
///   </div>
@mixin helper-classes() {
  @each $style, $value in light.$properties {
    $bg-color: map.get(light.$properties, $style);
    @if $style != 'background' and $style != 'surface' and $style != 'outline' {
      .fds-#{$style} {
        color: var(--fds-#{$style}, #{$bg-color});
      }
      .fds-#{$style}-bg {
        background: var(--fds-#{$style}, #{$bg-color});
      }
    }
  }
  .fds-background {
    @include property(background, background);
  }
  .fds-surface {
    @include property(background, surface);
  }
  .fds-outline {
    border-width: 1px;
    border-style: solid;
    @include property(border-color, outline);
  }
}

/// Generates CSS to apply background color to a container.
///
/// @example
///   .my-primary-container {
///     @include fds.bg-color(primary);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin bg-color($style) {
  @include property(background, $style);
}

/// Generates CSS to apply color to a text.
///
/// @example
///   .my-error-text {
///     @include fds.text-color(error);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin text-color($style) {
  $bg-color: map.get(light.$properties, $style);
  @if string.index($style, 'gradient') == 1 {
    background: var(--fds-#{$style}, #{$bg-color});
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  } @else {
    color: var(--fds-#{$style}, #{$bg-color});
  }
}

/// Generates CSS to fill an svg with a given color.
///
/// @example
///   .my-svg {
///     @include fds.fill(primary);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin fill($style) {
  @include property(fill, $style);
}

/// Maps mdc's css properties to fds ones.
///
/// @example
///   mwc-textfield {
///     @include fds.mdc(text-field-label-ink-color, text-medium-on-background);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin mdc($mdc, $style) {
  $variable: map.get(light.$properties, $style);
  --mdc-#{$mdc}: var(--fds-#{$style}, #{$variable});
}

/// Generates CSS
///
/// @example
///   .mdc-card__media {
///     @include fds.property(background-image, card-media-background-image);
///   }
///
/// @param {String} $style - The name of the style to apply
@mixin property($property, $style) {
  $variable: map.get(light.$properties, $style);
  #{$property}: var(--fds-#{$style}, #{$variable});
}
