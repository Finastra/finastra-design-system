@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use './variables';

/// Loads the typography's custom properties.
///
/// @example
///   .my-headline {
///      font: var(--fds-headline-1);
///   }
@mixin custom-properties() {
  @each $key, $value in variables.$properties {
    @if (meta.type-of($value) == 'map') {
      $mdc-typo-style: str-replace($key, '-', '');
      @each $typo-style, $typo-style-value in $value {
        --fds-#{$key}-#{$typo-style}: #{$typo-style-value};
        --mdc-typography-#{$mdc-typo-style}-#{$typo-style}: var(--fds-#{$key}-#{$typo-style}, #{$typo-style-value});
      }
      --fds-#{$key}: #{typo-fallback($key)};
    } @else {
      --fds-#{$key}: #{$value};
      --mdc-typography-#{$key}: #{$value};
    }
  }
}

/// Loads the typography's helper classes.
///
/// @example
///   <p class="fds-body-2">Hello</p>
@mixin helper-classes() {
  @each $key, $value in variables.$properties {
    @if (meta.type-of($value) == 'map') {
      $letter-spacing: map.get($value, 'letter-spacing');

      .fds-#{$key} {
        font: var(--fds-#{$key}, #{typo-fallback($key)});
        letter-spacing: #{$letter-spacing};
      }
    }
  }
}

/// Apply typography style to a text
///
/// @example
///   .my-small-text {
///     @include fds.typography(caption)
///   }
///
/// @param {String} $style - any of the predefined style in Finastra's typo scale
@mixin typography($style) {
  $typo-style: map.get(variables.$properties, $style);
  $letter-spacing: map.get($typo-style, 'letter-spacing');

  font: var(--fds-#{$style}, #{typo-fallback($style)});
  letter-spacing: #{$letter-spacing};
}

/// Returns a value for font
///
/// @param {Map} $typo-style - Map that includes font-related properties
@function typo-fallback($typo-style) {
  $style: map.get(variables.$properties, $typo-style);
  $font-weight: map.get($style, 'font-weight');
  $font-size: map.get($style, 'font-size');
  $line-height: map.get($style, 'line-height');
  $font-family: map.get($style, 'font-family');

  @return normal normal var(--fds-#{$typo-style}-font-weight, #{$font-weight}) var(--fds-#{$typo-style}-font-size, #{$font-size}) /
    var(--fds-#{$typo-style}-line-height, #{$line-height}) var(--fds-#{$typo-style}-font-family, #{$font-family});
}

// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
