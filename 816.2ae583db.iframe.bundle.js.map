{"version":3,"file":"816.2ae583db.iframe.bundle.js","mappings":";;;;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;;;AAOA;;;AAMA;;AAGA;AAGA;;ACxEA;AACA;;AAEA;;;AAGA;AACA;AACA;AAMA;;;AAYA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;;;AAIA;;AAOA;;;AAYA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;;;;;AC7DA;AAMA;AACA;;;AAGA;AACA;;;;AASA;;ACjEA;;AAGA;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAMA;ACiBA;AACA;AACA;AACA;;AAMA;AAGA;AAYA;;AAIA;;;AAMA;;AAIA;AAGA;;;;;;;AAaA;;;ACEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AAKA;AAGA;;AC3FA;AACA;AACA;AACA;AACA;;AAIA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAKA;ACuEA;AACA;ACzIA;;;;;;AASA;AC4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;;AAgBA;;AAGA;AACA;;AAEA;AALA;;AAcA;AACA;AAJA;AAwCA;;AAoBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;;;AAcA;AACA;AACA;AACA;AANA;;AAcA;AC9PA;;;;AAIA;AACA;;AAEA;;;;;;AAMA;;;AAKA","sources":["webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-button/mwc-button-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-circular-progress/mwc-circular-progress-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-drawer/mwc-drawer-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-icon-button/mwc-icon-button-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-list/mwc-list-item-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-list/mwc-list-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-menu/mwc-menu-surface-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-menu/mwc-menu-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-ripple/mwc-ripple-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-notched-outline/mwc-notched-outline-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-textfield/mwc-textfield-base.js","webpack://@finastra/finastra-design-system/./node_modules/@material/mwc-top-app-bar/mwc-top-app-bar-base-base.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-icon/mwc-icon';\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { html, LitElement } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class ButtonBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.raised = false;\n        this.unelevated = false;\n        this.outlined = false;\n        this.dense = false;\n        this.disabled = false;\n        this.trailingIcon = false;\n        this.fullwidth = false;\n        this.icon = '';\n        this.label = '';\n        this.expandContent = false;\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    /** @soyTemplate */\n    renderOverlay() {\n        return html ``;\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        const filled = this.raised || this.unelevated;\n        return this.shouldRenderRipple ?\n            html `<mwc-ripple class=\"ripple\" .primary=\"${!filled}\" .disabled=\"${this.disabled}\"></mwc-ripple>` :\n            '';\n    }\n    focus() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.startFocus();\n            buttonElement.focus();\n        }\n    }\n    blur() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.endFocus();\n            buttonElement.blur();\n        }\n    }\n    /** @soyTemplate */\n    getRenderClasses() {\n        return {\n            'mdc-button--raised': this.raised,\n            'mdc-button--unelevated': this.unelevated,\n            'mdc-button--outlined': this.outlined,\n            'mdc-button--dense': this.dense,\n        };\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes buttonAttributes: #button\n     * @soyClasses buttonClasses: #button\n     */\n    render() {\n        return html `\n      <button\n          id=\"button\"\n          class=\"mdc-button ${classMap(this.getRenderClasses())}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n          @focus=\"${this.handleRippleFocus}\"\n          @blur=\"${this.handleRippleBlur}\"\n          @mousedown=\"${this.handleRippleActivate}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleActivate}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        ${this.renderOverlay()}\n        ${this.renderRipple()}\n        <span class=\"leading-icon\">\n          <slot name=\"icon\">\n            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n        <span class=\"mdc-button__label\">${this.label}</span>\n        <span class=\"slot-container ${classMap({\n            flex: this.expandContent\n        })}\">\n          <slot></slot>\n        </span>\n        <span class=\"trailing-icon\">\n          <slot name=\"trailingIcon\">\n            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n      </button>`;\n    }\n    /** @soyTemplate */\n    renderIcon() {\n        return html `\n    <mwc-icon class=\"mdc-button__icon\">\n      ${this.icon}\n    </mwc-icon>`;\n    }\n    handleRippleActivate(evt) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\nButtonBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-haspopup' })\n], ButtonBase.prototype, \"ariaHasPopup\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"raised\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"unelevated\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"dense\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'trailingicon' })\n], ButtonBase.prototype, \"trailingIcon\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], ButtonBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ButtonBase.prototype, \"expandContent\", void 0);\n__decorate([\n    query('#button')\n], ButtonBase.prototype, \"buttonElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], ButtonBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], ButtonBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], ButtonBase.prototype, \"handleRippleActivate\", null);\n//# sourceMappingURL=mwc-button-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.indeterminate = false;\n        this.progress = 0;\n        this.density = 0;\n        this.closed = false;\n    }\n    open() {\n        this.closed = false;\n    }\n    close() {\n        this.closed = true;\n    }\n    /**\n     * @soyTemplate\n     */\n    render() {\n        /** @classMap */\n        const classes = {\n            'mdc-circular-progress--closed': this.closed,\n            'mdc-circular-progress--indeterminate': this.indeterminate,\n        };\n        const containerSideLength = 48 + this.density * 4;\n        /** @styleMap */\n        const styles = {\n            'width': `${containerSideLength}px`,\n            'height': `${containerSideLength}px`,\n        };\n        return html `\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n    }\n    /**\n     * @soyTemplate\n     */\n    renderDeterminateContainer() {\n        const sideLength = 48 + this.density * 4;\n        const center = sideLength / 2;\n        const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n            12.5 + (this.density + 3) * 5 / 4;\n        const circumference = 2 * 3.1415926 * circleRadius;\n        const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n        const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n            3 + (this.density + 3) * (1 / 6);\n        return html `\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n    }\n    /**\n     * @soyTemplate\n     */\n    renderIndeterminateContainer() {\n        return html `\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n    }\n    /**\n     * @soyTemplate\n     */\n    renderIndeterminateSpinnerLayer() {\n        const sideLength = 48 + this.density * 4;\n        const center = sideLength / 2;\n        const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n            12.5 + (this.density + 3) * 5 / 4;\n        const circumference = 2 * 3.1415926 * circleRadius;\n        const halfCircumference = 0.5 * circumference;\n        const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n            3 + (this.density + 3) * (1 / 6);\n        return html `\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n    }\n    update(changedProperties) {\n        super.update(changedProperties);\n        // Bound progress value in interval [0, 1].\n        if (changedProperties.has('progress')) {\n            if (this.progress > 1) {\n                this.progress = 1;\n            }\n            if (this.progress < 0) {\n                this.progress = 0;\n            }\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CircularProgressBase.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], CircularProgressBase.prototype, \"progress\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], CircularProgressBase.prototype, \"density\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CircularProgressBase.prototype, \"closed\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], CircularProgressBase.prototype, \"ariaLabel\", void 0);\n//# sourceMappingURL=mwc-circular-progress-base.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n// Note this blocking-elements import is not redundant with the one below,\n// because we need to ensure we import this module at runtime for its\n// side-effects. See\n// https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-imports-being-elided-in-my-emit.\nimport 'blocking-elements';\nimport 'wicg-inert';\nimport { strings } from '@material/drawer/constants';\nimport MDCDismissibleDrawerFoundation from '@material/drawer/dismissible/foundation';\nimport MDCModalDrawerFoundation from '@material/drawer/modal/foundation';\nimport { addHasRemoveClass, BaseElement } from '@material/mwc-base/base-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nconst blockingElements = document.$blockingElements;\nexport class DrawerBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this._previousFocus = null;\n        this.open = false;\n        this.hasHeader = false;\n        this.type = '';\n    }\n    get mdcFoundationClass() {\n        return this.type === 'modal' ? MDCModalDrawerFoundation :\n            MDCDismissibleDrawerFoundation;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { elementHasClass: (element, className) => element.classList.contains(className), saveFocus: () => {\n                // Note, casting to avoid cumbersome runtime check.\n                this._previousFocus =\n                    this.getRootNode().activeElement;\n            }, restoreFocus: () => {\n                const previousFocus = this._previousFocus && this._previousFocus.focus;\n                if (previousFocus) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    this._previousFocus.focus();\n                }\n            }, notifyClose: () => {\n                this.open = false;\n                this.dispatchEvent(new Event(strings.CLOSE_EVENT, { bubbles: true, cancelable: true }));\n            }, notifyOpen: () => {\n                this.open = true;\n                this.dispatchEvent(new Event(strings.OPEN_EVENT, { bubbles: true, cancelable: true }));\n            }, focusActiveNavigationItem: () => { }, trapFocus: () => {\n                blockingElements.push(this);\n                this.appContent.inert = true;\n            }, releaseFocus: () => {\n                blockingElements.remove(this);\n                this.appContent.inert = false;\n            } });\n    }\n    _handleScrimClick() {\n        if (this.mdcFoundation instanceof MDCModalDrawerFoundation) {\n            this.mdcFoundation.handleScrimClick();\n        }\n    }\n    render() {\n        const dismissible = this.type === 'dismissible' || this.type === 'modal';\n        const modal = this.type === 'modal';\n        const header = this.hasHeader ? html `\n      <div class=\"mdc-drawer__header\">\n        <h3 class=\"mdc-drawer__title\"><slot name=\"title\"></slot></h3>\n        <h6 class=\"mdc-drawer__subtitle\"><slot name=\"subtitle\"></slot></h6>\n        <slot name=\"header\"></slot>\n      </div>\n      ` :\n            '';\n        const classes = {\n            'mdc-drawer--dismissible': dismissible,\n            'mdc-drawer--modal': modal,\n        };\n        return html `\n      <aside class=\"mdc-drawer ${classMap(classes)}\">\n        ${header}\n        <div class=\"mdc-drawer__content\"><slot></slot></div>\n      </aside>\n      ${modal ? html `<div class=\"mdc-drawer-scrim\"\n                          @click=\"${this._handleScrimClick}\"></div>` :\n            ''}\n      <div class=\"mdc-drawer-app-content\">\n        <slot name=\"appContent\"></slot>\n      </div>\n      `;\n    }\n    // note, we avoid calling `super.firstUpdated()` to control when\n    // `createFoundation()` is called.\n    firstUpdated() {\n        this.mdcRoot.addEventListener('keydown', (e) => this.mdcFoundation.handleKeydown(e));\n        this.mdcRoot.addEventListener('transitionend', (e) => this.mdcFoundation.handleTransitionEnd(e));\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('type')) {\n            this.createFoundation();\n        }\n    }\n}\n__decorate([\n    query('.mdc-drawer')\n], DrawerBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('.mdc-drawer-app-content')\n], DrawerBase.prototype, \"appContent\", void 0);\n__decorate([\n    observer(function (value) {\n        if (this.type === '') {\n            return;\n        }\n        if (value) {\n            this.mdcFoundation.open();\n        }\n        else {\n            this.mdcFoundation.close();\n        }\n    }),\n    property({ type: Boolean, reflect: true })\n], DrawerBase.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean })\n], DrawerBase.prototype, \"hasHeader\", void 0);\n__decorate([\n    property({ reflect: true })\n], DrawerBase.prototype, \"type\", void 0);\n//# sourceMappingURL=mwc-drawer-base.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple';\nimport { ariaProperty } from '@material/mwc-base/aria-property';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { html, LitElement } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class IconButtonBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.disabled = false;\n        this.icon = '';\n        this.shouldRenderRipple = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? html `\n            <mwc-ripple\n                .disabled=\"${this.disabled}\"\n                unbounded>\n            </mwc-ripple>` :\n            '';\n    }\n    focus() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.startFocus();\n            buttonElement.focus();\n        }\n    }\n    blur() {\n        const buttonElement = this.buttonElement;\n        if (buttonElement) {\n            this.rippleHandlers.endFocus();\n            buttonElement.blur();\n        }\n    }\n    /** @soyTemplate */\n    render() {\n        return html `<button\n        class=\"mdc-icon-button mdc-icon-button--display-flex\"\n        aria-label=\"${this.ariaLabel || this.icon}\"\n        aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n        ?disabled=\"${this.disabled}\"\n        @focus=\"${this.handleRippleFocus}\"\n        @blur=\"${this.handleRippleBlur}\"\n        @mousedown=\"${this.handleRippleMouseDown}\"\n        @mouseenter=\"${this.handleRippleMouseEnter}\"\n        @mouseleave=\"${this.handleRippleMouseLeave}\"\n        @touchstart=\"${this.handleRippleTouchStart}\"\n        @touchend=\"${this.handleRippleDeactivate}\"\n        @touchcancel=\"${this.handleRippleDeactivate}\"\n    >${this.renderRipple()}\n    <i class=\"material-icons\">${this.icon}</i>\n    <span\n      ><slot></slot\n    ></span>\n  </button>`;\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n}\n__decorate([\n    property({ type: Boolean, reflect: true })\n], IconButtonBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], IconButtonBase.prototype, \"icon\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], IconButtonBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-haspopup' })\n], IconButtonBase.prototype, \"ariaHasPopup\", void 0);\n__decorate([\n    query('button')\n], IconButtonBase.prototype, \"buttonElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], IconButtonBase.prototype, \"ripple\", void 0);\n__decorate([\n    state()\n], IconButtonBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonBase.prototype, \"handleRippleMouseDown\", null);\n__decorate([\n    eventOptions({ passive: true })\n], IconButtonBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-icon-button-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple';\nimport { observer } from '@material/mwc-base/observer';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';\nimport { html, LitElement } from 'lit';\nimport { property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.value = '';\n        this.group = null;\n        this.tabindex = -1;\n        this.disabled = false;\n        this.twoline = false;\n        this.activated = false;\n        this.graphic = null;\n        this.multipleGraphics = false;\n        this.hasMeta = false;\n        this.noninteractive = false;\n        this.selected = false;\n        this.shouldRenderRipple = false;\n        this._managingList = null;\n        this.boundOnClick = this.onClick.bind(this);\n        this._firstChanged = true;\n        this._skipPropRequest = false;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            return this.ripple;\n        });\n        this.listeners = [\n            {\n                target: this,\n                eventNames: ['click'],\n                cb: () => {\n                    this.onClick();\n                },\n            },\n            {\n                target: this,\n                eventNames: ['mouseenter'],\n                cb: this.rippleHandlers.startHover,\n            },\n            {\n                target: this,\n                eventNames: ['mouseleave'],\n                cb: this.rippleHandlers.endHover,\n            },\n            {\n                target: this,\n                eventNames: ['focus'],\n                cb: this.rippleHandlers.startFocus,\n            },\n            {\n                target: this,\n                eventNames: ['blur'],\n                cb: this.rippleHandlers.endFocus,\n            },\n            {\n                target: this,\n                eventNames: ['mousedown', 'touchstart'],\n                cb: (e) => {\n                    const name = e.type;\n                    this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n                },\n            },\n        ];\n    }\n    get text() {\n        const textContent = this.textContent;\n        return textContent ? textContent.trim() : '';\n    }\n    render() {\n        const text = this.renderText();\n        const graphic = this.graphic ? this.renderGraphic() : html ``;\n        const meta = this.hasMeta ? this.renderMeta() : html ``;\n        return html `\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n    }\n    renderRipple() {\n        if (this.shouldRenderRipple) {\n            return html `\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n        }\n        else if (this.activated) {\n            return html `<div class=\"fake-activated-ripple\"></div>`;\n        }\n        else {\n            return '';\n        }\n    }\n    renderGraphic() {\n        const graphicClasses = {\n            multi: this.multipleGraphics,\n        };\n        return html `\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n    }\n    renderMeta() {\n        return html `\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n    }\n    renderText() {\n        const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n        return html `\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n    }\n    renderSingleLine() {\n        return html `<slot></slot>`;\n    }\n    renderTwoline() {\n        return html `\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n    }\n    onClick() {\n        this.fireRequestSelected(!this.selected, 'interaction');\n    }\n    onDown(upName, evt) {\n        const onUp = () => {\n            window.removeEventListener(upName, onUp);\n            this.rippleHandlers.endPress();\n        };\n        window.addEventListener(upName, onUp);\n        this.rippleHandlers.startPress(evt);\n    }\n    fireRequestSelected(selected, source) {\n        if (this.noninteractive) {\n            return;\n        }\n        const customEv = new CustomEvent('request-selected', { bubbles: true, composed: true, detail: { source, selected } });\n        this.dispatchEvent(customEv);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.noninteractive) {\n            this.setAttribute('mwc-list-item', '');\n        }\n        for (const listener of this.listeners) {\n            for (const eventName of listener.eventNames) {\n                listener.target.addEventListener(eventName, listener.cb, { passive: true });\n            }\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        for (const listener of this.listeners) {\n            for (const eventName of listener.eventNames) {\n                listener.target.removeEventListener(eventName, listener.cb);\n            }\n        }\n        if (this._managingList) {\n            this._managingList.debouncedLayout ?\n                this._managingList.debouncedLayout(true) :\n                this._managingList.layout(true);\n        }\n    }\n    // composed flag, event fire through shadow root and up through composed tree\n    firstUpdated() {\n        const ev = new Event('list-item-rendered', { bubbles: true, composed: true });\n        this.dispatchEvent(ev);\n    }\n}\n__decorate([\n    query('slot')\n], ListItemBase.prototype, \"slotElement\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], ListItemBase.prototype, \"ripple\", void 0);\n__decorate([\n    property({ type: String })\n], ListItemBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ListItemBase.prototype, \"group\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], ListItemBase.prototype, \"tabindex\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        if (value) {\n            this.setAttribute('aria-disabled', 'true');\n        }\n        else {\n            this.setAttribute('aria-disabled', 'false');\n        }\n    })\n], ListItemBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ListItemBase.prototype, \"twoline\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], ListItemBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], ListItemBase.prototype, \"graphic\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListItemBase.prototype, \"multipleGraphics\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListItemBase.prototype, \"hasMeta\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        if (value) {\n            this.removeAttribute('aria-checked');\n            this.removeAttribute('mwc-list-item');\n            this.selected = false;\n            this.activated = false;\n            this.tabIndex = -1;\n        }\n        else {\n            this.setAttribute('mwc-list-item', '');\n        }\n    })\n], ListItemBase.prototype, \"noninteractive\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        const role = this.getAttribute('role');\n        const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n            role === 'row' || role === 'tab';\n        if (isAriaSelectable && value) {\n            this.setAttribute('aria-selected', 'true');\n        }\n        else if (isAriaSelectable) {\n            this.setAttribute('aria-selected', 'false');\n        }\n        if (this._firstChanged) {\n            this._firstChanged = false;\n            return;\n        }\n        if (this._skipPropRequest) {\n            return;\n        }\n        this.fireRequestSelected(value, 'property');\n    })\n], ListItemBase.prototype, \"selected\", void 0);\n__decorate([\n    state()\n], ListItemBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    state()\n], ListItemBase.prototype, \"_managingList\", void 0);\n//# sourceMappingURL=mwc-list-item-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport './mwc-list-item';\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { deepActiveElementPath, doesElementContainFocus, isNodeElement } from '@material/mwc-base/utils';\nimport { html } from 'lit';\nimport { property, query, queryAssignedNodes } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport MDCListFoundation, { isIndexSet } from './mwc-list-foundation';\nexport { createSetFromIndex, isEventMulti, isIndexSet } from './mwc-list-foundation';\nfunction debounceLayout(callback, waitInMS = 50) {\n    let timeoutId;\n    // tslint:disable-next-line\n    return function (updateItems = true) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n            callback(updateItems);\n        }, waitInMS);\n    };\n}\nconst isListItem = (element) => {\n    return element.hasAttribute('mwc-list-item');\n};\nfunction clearAndCreateItemsReadyPromise() {\n    const oldResolver = this.itemsReadyResolver;\n    this.itemsReady = new Promise((res) => {\n        // TODO(b/175626389): Type '(value: never[] | PromiseLike<never[]>) => void'\n        // is not assignable to type '(value?: never[] | PromiseLike<never[]> |\n        // undefined) => void'.\n        return this.itemsReadyResolver = res;\n    });\n    oldResolver();\n}\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n */\nexport class ListBase extends BaseElement {\n    constructor() {\n        super();\n        this.mdcAdapter = null;\n        this.mdcFoundationClass = MDCListFoundation;\n        this.activatable = false;\n        this.multi = false;\n        this.wrapFocus = false;\n        this.itemRoles = null;\n        this.innerRole = null;\n        this.innerAriaLabel = null;\n        this.rootTabbable = false;\n        this.previousTabindex = null;\n        this.noninteractive = false;\n        this.itemsReadyResolver = (() => {\n            //\n        });\n        this.itemsReady = Promise.resolve([]);\n        // tslint:enable:ban-ts-ignore\n        this.items_ = [];\n        const debouncedFunction = debounceLayout(this.layout.bind(this));\n        this.debouncedLayout = (updateItems = true) => {\n            clearAndCreateItemsReadyPromise.call(this);\n            debouncedFunction(updateItems);\n        };\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        await this.itemsReady;\n        return result;\n    }\n    get items() {\n        return this.items_;\n    }\n    updateItems() {\n        var _a;\n        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];\n        const listItems = [];\n        for (const node of nodes) {\n            if (isListItem(node)) {\n                listItems.push(node);\n                node._managingList = this;\n            }\n            if (node.hasAttribute('divider') && !node.hasAttribute('role')) {\n                node.setAttribute('role', 'separator');\n            }\n        }\n        this.items_ = listItems;\n        const selectedIndices = new Set();\n        this.items_.forEach((item, index) => {\n            if (this.itemRoles) {\n                item.setAttribute('role', this.itemRoles);\n            }\n            else {\n                item.removeAttribute('role');\n            }\n            if (item.selected) {\n                selectedIndices.add(index);\n            }\n        });\n        if (this.multi) {\n            this.select(selectedIndices);\n        }\n        else {\n            const index = selectedIndices.size ? selectedIndices.entries().next().value[1] : -1;\n            this.select(index);\n        }\n        const itemsUpdatedEv = new Event('items-updated', { bubbles: true, composed: true });\n        this.dispatchEvent(itemsUpdatedEv);\n    }\n    get selected() {\n        const index = this.index;\n        if (!isIndexSet(index)) {\n            if (index === -1) {\n                return null;\n            }\n            return this.items[index];\n        }\n        const selected = [];\n        for (const entry of index) {\n            selected.push(this.items[entry]);\n        }\n        return selected;\n    }\n    get index() {\n        if (this.mdcFoundation) {\n            return this.mdcFoundation.getSelectedIndex();\n        }\n        return -1;\n    }\n    render() {\n        const role = this.innerRole === null ? undefined : this.innerRole;\n        const ariaLabel = this.innerAriaLabel === null ? undefined : this.innerAriaLabel;\n        const tabindex = this.rootTabbable ? '0' : '-1';\n        return html `\n      <!-- @ts-ignore -->\n      <ul\n          tabindex=${tabindex}\n          role=\"${ifDefined(role)}\"\n          aria-label=\"${ifDefined(ariaLabel)}\"\n          class=\"mdc-deprecated-list\"\n          @keydown=${this.onKeydown}\n          @focusin=${this.onFocusIn}\n          @focusout=${this.onFocusOut}\n          @request-selected=${this.onRequestSelected}\n          @list-item-rendered=${this.onListItemConnected}>\n        <slot></slot>\n        ${this.renderPlaceholder()}\n      </ul>\n    `;\n    }\n    renderPlaceholder() {\n        var _a;\n        const nodes = (_a = this.assignedElements) !== null && _a !== void 0 ? _a : [];\n        if (this.emptyMessage !== undefined && nodes.length === 0) {\n            return html `\n        <mwc-list-item noninteractive>${this.emptyMessage}</mwc-list-item>\n      `;\n        }\n        return null;\n    }\n    firstUpdated() {\n        super.firstUpdated();\n        if (!this.items.length) {\n            // required because this is called before observers\n            this.mdcFoundation.setMulti(this.multi);\n            // for when children upgrade before list\n            this.layout();\n        }\n    }\n    onFocusIn(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            this.mdcFoundation.handleFocusIn(evt, index);\n        }\n    }\n    onFocusOut(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            this.mdcFoundation.handleFocusOut(evt, index);\n        }\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation && this.mdcRoot) {\n            const index = this.getIndexOfTarget(evt);\n            const target = evt.target;\n            const isRootListItem = isListItem(target);\n            this.mdcFoundation.handleKeydown(evt, isRootListItem, index);\n        }\n    }\n    onRequestSelected(evt) {\n        if (this.mdcFoundation) {\n            let index = this.getIndexOfTarget(evt);\n            // might happen in shady dom slowness. Recalc children\n            if (index === -1) {\n                this.layout();\n                index = this.getIndexOfTarget(evt);\n                // still not found; may not be mwc-list-item. Unsupported case.\n                if (index === -1) {\n                    return;\n                }\n            }\n            const element = this.items[index];\n            if (element.disabled) {\n                return;\n            }\n            const selected = evt.detail.selected;\n            const source = evt.detail.source;\n            this.mdcFoundation.handleSingleSelection(index, source === 'interaction', selected);\n            evt.stopPropagation();\n        }\n    }\n    getIndexOfTarget(evt) {\n        const elements = this.items;\n        const path = evt.composedPath();\n        for (const pathItem of path) {\n            let index = -1;\n            if (isNodeElement(pathItem) && isListItem(pathItem)) {\n                index = elements.indexOf(pathItem);\n            }\n            if (index !== -1) {\n                return index;\n            }\n        }\n        return -1;\n    }\n    createAdapter() {\n        this.mdcAdapter = {\n            getListItemCount: () => {\n                if (this.mdcRoot) {\n                    return this.items.length;\n                }\n                return 0;\n            },\n            getFocusedElementIndex: this.getFocusedItemIndex,\n            getAttributeForElementIndex: (index, attr) => {\n                const listElement = this.mdcRoot;\n                if (!listElement) {\n                    return '';\n                }\n                const element = this.items[index];\n                return element ? element.getAttribute(attr) : '';\n            },\n            setAttributeForElementIndex: (index, attr, val) => {\n                if (!this.mdcRoot) {\n                    return;\n                }\n                const element = this.items[index];\n                if (element) {\n                    element.setAttribute(attr, val);\n                }\n            },\n            focusItemAtIndex: (index) => {\n                const element = this.items[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            setTabIndexForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (item) {\n                    item.tabindex = value;\n                }\n            },\n            notifyAction: (index) => {\n                const init = { bubbles: true, composed: true };\n                init.detail = { index };\n                const ev = new CustomEvent('action', init);\n                this.dispatchEvent(ev);\n            },\n            notifySelected: (index, diff) => {\n                const init = { bubbles: true, composed: true };\n                init.detail = { index, diff };\n                const ev = new CustomEvent('selected', init);\n                this.dispatchEvent(ev);\n            },\n            isFocusInsideList: () => {\n                return doesElementContainFocus(this);\n            },\n            isRootFocused: () => {\n                const mdcRoot = this.mdcRoot;\n                const root = mdcRoot.getRootNode();\n                return root.activeElement === mdcRoot;\n            },\n            setDisabledStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.disabled = value;\n            },\n            getDisabledStateForElementIndex: (index) => {\n                const item = this.items[index];\n                if (!item) {\n                    return false;\n                }\n                return item.disabled;\n            },\n            setSelectedStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.selected = value;\n            },\n            getSelectedStateForElementIndex: (index) => {\n                const item = this.items[index];\n                if (!item) {\n                    return false;\n                }\n                return item.selected;\n            },\n            setActivatedStateForElementIndex: (index, value) => {\n                const item = this.items[index];\n                if (!item) {\n                    return;\n                }\n                item.activated = value;\n            },\n        };\n        return this.mdcAdapter;\n    }\n    selectUi(index, activate = false) {\n        const item = this.items[index];\n        if (item) {\n            item.selected = true;\n            item.activated = activate;\n        }\n    }\n    deselectUi(index) {\n        const item = this.items[index];\n        if (item) {\n            item.selected = false;\n            item.activated = false;\n        }\n    }\n    select(index) {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        this.mdcFoundation.setSelectedIndex(index);\n    }\n    toggle(index, force) {\n        if (this.multi) {\n            this.mdcFoundation.toggleMultiAtIndex(index, force);\n        }\n    }\n    onListItemConnected(e) {\n        const target = e.target;\n        this.layout(this.items.indexOf(target) === -1);\n    }\n    layout(updateItems = true) {\n        if (updateItems) {\n            this.updateItems();\n        }\n        const first = this.items[0];\n        for (const item of this.items) {\n            item.tabindex = -1;\n        }\n        if (first) {\n            if (this.noninteractive) {\n                if (!this.previousTabindex) {\n                    this.previousTabindex = first;\n                }\n            }\n            else {\n                first.tabindex = 0;\n            }\n        }\n        this.itemsReadyResolver();\n    }\n    getFocusedItemIndex() {\n        if (!this.mdcRoot) {\n            return -1;\n        }\n        if (!this.items.length) {\n            return -1;\n        }\n        const activeElementPath = deepActiveElementPath();\n        if (!activeElementPath.length) {\n            return -1;\n        }\n        for (let i = activeElementPath.length - 1; i >= 0; i--) {\n            const activeItem = activeElementPath[i];\n            if (isListItem(activeItem)) {\n                return this.items.indexOf(activeItem);\n            }\n        }\n        return -1;\n    }\n    focusItemAtIndex(index) {\n        for (const item of this.items) {\n            if (item.tabindex === 0) {\n                item.tabindex = -1;\n                break;\n            }\n        }\n        this.items[index].tabindex = 0;\n        this.items[index].focus();\n    }\n    focus() {\n        const root = this.mdcRoot;\n        if (root) {\n            root.focus();\n        }\n    }\n    blur() {\n        const root = this.mdcRoot;\n        if (root) {\n            root.blur();\n        }\n    }\n}\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"emptyMessage\", void 0);\n__decorate([\n    query('.mdc-deprecated-list')\n], ListBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '*')\n], ListBase.prototype, \"assignedElements\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '[tabindex=\"0\"]')\n], ListBase.prototype, \"tabbableElements\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setUseActivatedClass(value);\n        }\n    })\n], ListBase.prototype, \"activatable\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (newValue, oldValue) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setMulti(newValue);\n        }\n        if (oldValue !== undefined) {\n            this.layout();\n        }\n    })\n], ListBase.prototype, \"multi\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setWrapFocus(value);\n        }\n    })\n], ListBase.prototype, \"wrapFocus\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newValue, oldValue) {\n        if (oldValue !== undefined) {\n            this.updateItems();\n        }\n    })\n], ListBase.prototype, \"itemRoles\", void 0);\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"innerRole\", void 0);\n__decorate([\n    property({ type: String })\n], ListBase.prototype, \"innerAriaLabel\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ListBase.prototype, \"rootTabbable\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (value) {\n        var _a, _b;\n        if (value) {\n            const tabbable = (_b = (_a = this.tabbableElements) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n            this.previousTabindex = tabbable;\n            if (tabbable) {\n                tabbable.setAttribute('tabindex', '-1');\n            }\n        }\n        else if (!value && this.previousTabindex) {\n            this.previousTabindex.setAttribute('tabindex', '0');\n            this.previousTabindex = null;\n        }\n    })\n], ListBase.prototype, \"noninteractive\", void 0);\n//# sourceMappingURL=mwc-list-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { Corner as CornerEnum, CornerBit } from '@material/menu-surface/constants';\nimport MDCMenuSurfaceFoundation from '@material/menu-surface/foundation';\nimport { addHasRemoveClass, BaseElement } from '@material/mwc-base/base-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { deepActiveElementPath, doesElementContainFocus } from '@material/mwc-base/utils';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n// tslint:disable:no-bitwise\n// required for closure compiler\nconst stringToCorner = {\n    'TOP_LEFT': CornerEnum.TOP_LEFT,\n    'TOP_RIGHT': CornerEnum.TOP_RIGHT,\n    'BOTTOM_LEFT': CornerEnum.BOTTOM_LEFT,\n    'BOTTOM_RIGHT': CornerEnum.BOTTOM_RIGHT,\n    'TOP_START': CornerEnum.TOP_START,\n    'TOP_END': CornerEnum.TOP_END,\n    'BOTTOM_START': CornerEnum.BOTTOM_START,\n    'BOTTOM_END': CornerEnum.BOTTOM_END,\n};\n/**\n * @fires opened\n * @fires closed\n */\nexport class MenuSurfaceBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCMenuSurfaceFoundation;\n        this.absolute = false;\n        this.fullwidth = false;\n        this.fixed = false;\n        this.x = null;\n        this.y = null;\n        // must be defined before open or else race condition in foundation occurs.\n        this.quick = false;\n        this.open = false;\n        this.stayOpenOnBodyClick = false;\n        this.bitwiseCorner = CornerEnum.TOP_START;\n        this.previousMenuCorner = null;\n        // must be defined before observer of anchor corner for initialization\n        this.menuCorner = 'START';\n        this.corner = 'TOP_START';\n        this.styleTop = '';\n        this.styleLeft = '';\n        this.styleRight = '';\n        this.styleBottom = '';\n        this.styleMaxHeight = '';\n        this.styleTransformOrigin = '';\n        this.anchor = null;\n        this.previouslyFocused = null;\n        this.previousAnchor = null;\n        this.onBodyClickBound = () => undefined;\n    }\n    render() {\n        const classes = {\n            'mdc-menu-surface--fixed': this.fixed,\n            'mdc-menu-surface--fullwidth': this.fullwidth,\n        };\n        const styles = {\n            'top': this.styleTop,\n            'left': this.styleLeft,\n            'right': this.styleRight,\n            'bottom': this.styleBottom,\n            'max-height': this.styleMaxHeight,\n            'transform-origin': this.styleTransformOrigin,\n        };\n        return html `\n      <div\n          class=\"mdc-menu-surface ${classMap(classes)}\"\n          style=\"${styleMap(styles)}\"\n          @keydown=${this.onKeydown}\n          @opened=${this.registerBodyClick}\n          @closed=${this.deregisterBodyClick}>\n        <slot></slot>\n      </div>`;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { hasAnchor: () => {\n                return !!this.anchor;\n            }, notifyClose: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('closed', init);\n                this.open = false;\n                this.mdcRoot.dispatchEvent(ev);\n            }, notifyClosing: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('closing', init);\n                this.mdcRoot.dispatchEvent(ev);\n            }, notifyOpen: () => {\n                const init = { bubbles: true, composed: true };\n                const ev = new CustomEvent('opened', init);\n                this.open = true;\n                this.mdcRoot.dispatchEvent(ev);\n            }, isElementInContainer: () => false, isRtl: () => {\n                if (this.mdcRoot) {\n                    return getComputedStyle(this.mdcRoot).direction === 'rtl';\n                }\n                return false;\n            }, setTransformOrigin: (origin) => {\n                const root = this.mdcRoot;\n                if (!root) {\n                    return;\n                }\n                this.styleTransformOrigin = origin;\n            }, isFocused: () => {\n                return doesElementContainFocus(this);\n            }, saveFocus: () => {\n                const activeElementPath = deepActiveElementPath();\n                const pathLength = activeElementPath.length;\n                if (!pathLength) {\n                    this.previouslyFocused = null;\n                }\n                this.previouslyFocused = activeElementPath[pathLength - 1];\n            }, restoreFocus: () => {\n                if (!this.previouslyFocused) {\n                    return;\n                }\n                if ('focus' in this.previouslyFocused) {\n                    this.previouslyFocused.focus();\n                }\n            }, getInnerDimensions: () => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return { width: 0, height: 0 };\n                }\n                return { width: mdcRoot.offsetWidth, height: mdcRoot.offsetHeight };\n            }, getAnchorDimensions: () => {\n                const anchorElement = this.anchor;\n                return anchorElement ? anchorElement.getBoundingClientRect() : null;\n            }, getBodyDimensions: () => {\n                return {\n                    width: document.body.clientWidth,\n                    height: document.body.clientHeight,\n                };\n            }, getWindowDimensions: () => {\n                return {\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                };\n            }, getWindowScroll: () => {\n                return {\n                    x: window.pageXOffset,\n                    y: window.pageYOffset,\n                };\n            }, setPosition: (position) => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return;\n                }\n                this.styleLeft = 'left' in position ? `${position.left}px` : '';\n                this.styleRight = 'right' in position ? `${position.right}px` : '';\n                this.styleTop = 'top' in position ? `${position.top}px` : '';\n                this.styleBottom = 'bottom' in position ? `${position.bottom}px` : '';\n            }, setMaxHeight: async (height) => {\n                const mdcRoot = this.mdcRoot;\n                if (!mdcRoot) {\n                    return;\n                }\n                // must set both for IE support as IE will not set a var\n                this.styleMaxHeight = height;\n                await this.updateComplete;\n                this.styleMaxHeight = `var(--mdc-menu-max-height, ${height})`;\n            } });\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleKeydown(evt);\n        }\n    }\n    onBodyClick(evt) {\n        if (this.stayOpenOnBodyClick) {\n            return;\n        }\n        const path = evt.composedPath();\n        if (path.indexOf(this) === -1) {\n            this.close();\n        }\n    }\n    registerBodyClick() {\n        this.onBodyClickBound = this.onBodyClick.bind(this);\n        // capture otherwise listener closes menu after quick menu opens\n        document.body.addEventListener('click', this.onBodyClickBound, { passive: true, capture: true });\n    }\n    deregisterBodyClick() {\n        document.body.removeEventListener('click', this.onBodyClickBound, { capture: true });\n    }\n    close() {\n        this.open = false;\n    }\n    show() {\n        this.open = true;\n    }\n}\n__decorate([\n    query('.mdc-menu-surface')\n], MenuSurfaceBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('slot')\n], MenuSurfaceBase.prototype, \"slotElement\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (isAbsolute) {\n        if (this.mdcFoundation && !this.fixed) {\n            this.mdcFoundation.setIsHoisted(isAbsolute);\n        }\n    })\n], MenuSurfaceBase.prototype, \"absolute\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuSurfaceBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (isFixed) {\n        if (this.mdcFoundation && !this.absolute) {\n            this.mdcFoundation.setFixedPosition(isFixed);\n        }\n    })\n], MenuSurfaceBase.prototype, \"fixed\", void 0);\n__decorate([\n    property({ type: Number }),\n    observer(function (value) {\n        if (this.mdcFoundation && this.y !== null && value !== null) {\n            this.mdcFoundation.setAbsolutePosition(value, this.y);\n            this.mdcFoundation.setAnchorMargin({ left: value, top: this.y, right: -value, bottom: this.y });\n        }\n    })\n], MenuSurfaceBase.prototype, \"x\", void 0);\n__decorate([\n    property({ type: Number }),\n    observer(function (value) {\n        if (this.mdcFoundation && this.x !== null && value !== null) {\n            this.mdcFoundation.setAbsolutePosition(this.x, value);\n            this.mdcFoundation.setAnchorMargin({ left: this.x, top: value, right: -this.x, bottom: value });\n        }\n    })\n], MenuSurfaceBase.prototype, \"y\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setQuickOpen(value);\n        }\n    })\n], MenuSurfaceBase.prototype, \"quick\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (isOpen, wasOpen) {\n        if (this.mdcFoundation) {\n            if (isOpen) {\n                this.mdcFoundation.open();\n                // wasOpen helps with first render (when it is `undefined`) perf\n            }\n            else if (wasOpen !== undefined) {\n                this.mdcFoundation.close();\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuSurfaceBase.prototype, \"stayOpenOnBodyClick\", void 0);\n__decorate([\n    state(),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            if (value) {\n                this.mdcFoundation.setAnchorCorner(value);\n            }\n            else {\n                this.mdcFoundation.setAnchorCorner(value);\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"bitwiseCorner\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            const isValidValue = value === 'START' || value === 'END';\n            const isFirstTimeSet = this.previousMenuCorner === null;\n            const cornerChanged = !isFirstTimeSet && value !== this.previousMenuCorner;\n            const initiallySetToEnd = isFirstTimeSet && value === 'END';\n            if (isValidValue && (cornerChanged || initiallySetToEnd)) {\n                this.bitwiseCorner = this.bitwiseCorner ^ CornerBit.RIGHT;\n                this.mdcFoundation.flipCornerHorizontally();\n                this.previousMenuCorner = value;\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"menuCorner\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            if (value) {\n                let newCorner = stringToCorner[value];\n                if (this.menuCorner === 'END') {\n                    newCorner = newCorner ^ CornerBit.RIGHT;\n                }\n                this.bitwiseCorner = newCorner;\n            }\n        }\n    })\n], MenuSurfaceBase.prototype, \"corner\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleTop\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleLeft\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleRight\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleBottom\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleMaxHeight\", void 0);\n__decorate([\n    state()\n], MenuSurfaceBase.prototype, \"styleTransformOrigin\", void 0);\n//# sourceMappingURL=mwc-menu-surface-base.js.map","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-list';\nimport './mwc-menu-surface';\nimport { DefaultFocusState as DefaultFocusStateEnum } from '@material/menu/constants';\nimport MDCMenuFoundation from '@material/menu/foundation';\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nexport { createSetFromIndex, isEventMulti, isIndexSet } from '@material/mwc-list/mwc-list-foundation';\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n * @fires opened\n * @fires closed\n */\nexport class MenuBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCMenuFoundation;\n        this.listElement_ = null;\n        this.anchor = null;\n        this.open = false;\n        this.quick = false;\n        this.wrapFocus = false;\n        this.innerRole = 'menu';\n        this.innerAriaLabel = null;\n        this.corner = 'TOP_START';\n        this.x = null;\n        this.y = null;\n        this.absolute = false;\n        this.multi = false;\n        this.activatable = false;\n        this.fixed = false;\n        this.forceGroupSelection = false;\n        this.fullwidth = false;\n        this.menuCorner = 'START';\n        this.stayOpenOnBodyClick = false;\n        this.defaultFocus = 'LIST_ROOT';\n        this._listUpdateComplete = null;\n    }\n    get listElement() {\n        if (!this.listElement_) {\n            this.listElement_ = this.renderRoot.querySelector('mwc-list');\n            return this.listElement_;\n        }\n        return this.listElement_;\n    }\n    get items() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.items;\n        }\n        return [];\n    }\n    get index() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.index;\n        }\n        return -1;\n    }\n    get selected() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.selected;\n        }\n        return null;\n    }\n    render() {\n        const itemRoles = this.innerRole === 'menu' ? 'menuitem' : 'option';\n        return html `\n      <mwc-menu-surface\n          ?hidden=${!this.open}\n          .anchor=${this.anchor}\n          .open=${this.open}\n          .quick=${this.quick}\n          .corner=${this.corner}\n          .x=${this.x}\n          .y=${this.y}\n          .absolute=${this.absolute}\n          .fixed=${this.fixed}\n          .fullwidth=${this.fullwidth}\n          .menuCorner=${this.menuCorner}\n          ?stayOpenOnBodyClick=${this.stayOpenOnBodyClick}\n          class=\"mdc-menu mdc-menu-surface\"\n          @closed=${this.onClosed}\n          @opened=${this.onOpened}\n          @keydown=${this.onKeydown}>\n        <mwc-list\n          rootTabbable\n          .innerAriaLabel=${this.innerAriaLabel}\n          .innerRole=${this.innerRole}\n          .multi=${this.multi}\n          class=\"mdc-deprecated-list\"\n          .itemRoles=${itemRoles}\n          .wrapFocus=${this.wrapFocus}\n          .activatable=${this.activatable}\n          @action=${this.onAction}>\n        <slot></slot>\n      </mwc-list>\n    </mwc-menu-surface>`;\n    }\n    createAdapter() {\n        return {\n            addClassToElementAtIndex: (index, className) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                if (className === 'mdc-menu-item--selected') {\n                    if (this.forceGroupSelection && !element.selected) {\n                        listElement.toggle(index, true);\n                    }\n                }\n                else {\n                    element.classList.add(className);\n                }\n            },\n            removeClassFromElementAtIndex: (index, className) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                if (className === 'mdc-menu-item--selected') {\n                    if (element.selected) {\n                        listElement.toggle(index, false);\n                    }\n                }\n                else {\n                    element.classList.remove(className);\n                }\n            },\n            addAttributeToElementAtIndex: (index, attr, value) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                element.setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: (index, attr) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return;\n                }\n                element.removeAttribute(attr);\n            },\n            getAttributeFromElementAtIndex: (index, attr) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return null;\n                }\n                const element = listElement.items[index];\n                if (!element) {\n                    return null;\n                }\n                return element.getAttribute(attr);\n            },\n            elementContainsClass: (element, className) => element.classList.contains(className),\n            closeSurface: () => {\n                this.open = false;\n            },\n            getElementIndex: (element) => {\n                const listElement = this.listElement;\n                if (listElement) {\n                    return listElement.items.indexOf(element);\n                }\n                return -1;\n            },\n            notifySelected: () => { },\n            getMenuItemCount: () => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return 0;\n                }\n                return listElement.items.length;\n            },\n            focusItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return;\n                }\n                const element = listElement.items[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            focusListRoot: () => {\n                if (this.listElement) {\n                    this.listElement.focus();\n                }\n            },\n            getSelectedSiblingOfItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return -1;\n                }\n                const elementAtIndex = listElement.items[index];\n                if (!elementAtIndex || !elementAtIndex.group) {\n                    return -1;\n                }\n                for (let i = 0; i < listElement.items.length; i++) {\n                    if (i === index) {\n                        continue;\n                    }\n                    const current = listElement.items[i];\n                    if (current.selected && current.group === elementAtIndex.group) {\n                        return i;\n                    }\n                }\n                return -1;\n            },\n            isSelectableItemAtIndex: (index) => {\n                const listElement = this.listElement;\n                if (!listElement) {\n                    return false;\n                }\n                const elementAtIndex = listElement.items[index];\n                if (!elementAtIndex) {\n                    return false;\n                }\n                return elementAtIndex.hasAttribute('group');\n            },\n        };\n    }\n    onKeydown(evt) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleKeydown(evt);\n        }\n    }\n    onAction(evt) {\n        const listElement = this.listElement;\n        if (this.mdcFoundation && listElement) {\n            const index = evt.detail.index;\n            const el = listElement.items[index];\n            if (el) {\n                this.mdcFoundation.handleItemAction(el);\n            }\n        }\n    }\n    onOpened() {\n        this.open = true;\n        if (this.mdcFoundation) {\n            this.mdcFoundation.handleMenuSurfaceOpened();\n        }\n    }\n    onClosed() {\n        this.open = false;\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        await this._listUpdateComplete;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    async firstUpdated() {\n        super.firstUpdated();\n        const listElement = this.listElement;\n        if (listElement) {\n            this._listUpdateComplete = listElement.updateComplete;\n            await this._listUpdateComplete;\n        }\n    }\n    select(index) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.select(index);\n        }\n    }\n    close() {\n        this.open = false;\n    }\n    show() {\n        this.open = true;\n    }\n    getFocusedItemIndex() {\n        const listElement = this.listElement;\n        if (listElement) {\n            return listElement.getFocusedItemIndex();\n        }\n        return -1;\n    }\n    focusItemAtIndex(index) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.focusItemAtIndex(index);\n        }\n    }\n    layout(updateItems = true) {\n        const listElement = this.listElement;\n        if (listElement) {\n            listElement.layout(updateItems);\n        }\n    }\n}\n__decorate([\n    query('.mdc-menu')\n], MenuBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('slot')\n], MenuBase.prototype, \"slotElement\", void 0);\n__decorate([\n    property({ type: Object })\n], MenuBase.prototype, \"anchor\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], MenuBase.prototype, \"open\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"quick\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"wrapFocus\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"innerRole\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"innerAriaLabel\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"corner\", void 0);\n__decorate([\n    property({ type: Number })\n], MenuBase.prototype, \"x\", void 0);\n__decorate([\n    property({ type: Number })\n], MenuBase.prototype, \"y\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"absolute\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"multi\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"activatable\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"fixed\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"forceGroupSelection\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"fullwidth\", void 0);\n__decorate([\n    property({ type: String })\n], MenuBase.prototype, \"menuCorner\", void 0);\n__decorate([\n    property({ type: Boolean })\n], MenuBase.prototype, \"stayOpenOnBodyClick\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (value) {\n        if (this.mdcFoundation) {\n            this.mdcFoundation.setDefaultFocusState(DefaultFocusStateEnum[value]);\n        }\n    })\n], MenuBase.prototype, \"defaultFocus\", void 0);\n//# sourceMappingURL=mwc-menu-base.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { matches } from '@material/dom/ponyfill';\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport MDCRippleFoundation from '@material/ripple/foundation';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n/** @soyCompatible */\nexport class RippleBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.primary = false;\n        this.accent = false;\n        this.unbounded = false;\n        this.disabled = false;\n        this.activated = false;\n        this.selected = false;\n        this.internalUseStateLayerCustomProperties = false;\n        this.hovering = false;\n        this.bgFocused = false;\n        this.fgActivation = false;\n        this.fgDeactivation = false;\n        this.fgScale = '';\n        this.fgSize = '';\n        this.translateStart = '';\n        this.translateEnd = '';\n        this.leftPos = '';\n        this.topPos = '';\n        this.mdcFoundationClass = MDCRippleFoundation;\n    }\n    get isActive() {\n        return matches(this.parentElement || this, ':active');\n    }\n    createAdapter() {\n        return {\n            browserSupportsCssVars: () => true,\n            isUnbounded: () => this.unbounded,\n            isSurfaceActive: () => this.isActive,\n            isSurfaceDisabled: () => this.disabled,\n            addClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = true;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            removeClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = false;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            containsEventTarget: () => true,\n            registerInteractionHandler: () => undefined,\n            deregisterInteractionHandler: () => undefined,\n            registerDocumentInteractionHandler: () => undefined,\n            deregisterDocumentInteractionHandler: () => undefined,\n            registerResizeHandler: () => undefined,\n            deregisterResizeHandler: () => undefined,\n            updateCssVariable: (varName, value) => {\n                switch (varName) {\n                    case '--mdc-ripple-fg-scale':\n                        this.fgScale = value;\n                        break;\n                    case '--mdc-ripple-fg-size':\n                        this.fgSize = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-end':\n                        this.translateEnd = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-start':\n                        this.translateStart = value;\n                        break;\n                    case '--mdc-ripple-left':\n                        this.leftPos = value;\n                        break;\n                    case '--mdc-ripple-top':\n                        this.topPos = value;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            computeBoundingRect: () => (this.parentElement || this).getBoundingClientRect(),\n            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),\n        };\n    }\n    startPress(ev) {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.activate(ev);\n        });\n    }\n    endPress() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.deactivate();\n        });\n    }\n    startFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleFocus();\n        });\n    }\n    endFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleBlur();\n        });\n    }\n    startHover() {\n        this.hovering = true;\n    }\n    endHover() {\n        this.hovering = false;\n    }\n    /**\n     * Wait for the MDCFoundation to be created by `firstUpdated`\n     */\n    waitForFoundation(fn) {\n        if (this.mdcFoundation) {\n            fn();\n        }\n        else {\n            this.updateComplete.then(fn);\n        }\n    }\n    update(changedProperties) {\n        if (changedProperties.has('disabled')) {\n            // stop hovering when ripple is disabled to prevent a stuck \"hover\" state\n            // When re-enabled, the outer component will get a `mouseenter` event on\n            // the first movement, which will call `startHover()`\n            if (this.disabled) {\n                this.endHover();\n            }\n        }\n        super.update(changedProperties);\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldActivateInPrimary = this.activated && (this.primary || !this.accent);\n        const shouldSelectInPrimary = this.selected && (this.primary || !this.accent);\n        /** @classMap */\n        const classes = {\n            'mdc-ripple-surface--accent': this.accent,\n            'mdc-ripple-surface--primary--activated': shouldActivateInPrimary,\n            'mdc-ripple-surface--accent--activated': this.accent && this.activated,\n            'mdc-ripple-surface--primary--selected': shouldSelectInPrimary,\n            'mdc-ripple-surface--accent--selected': this.accent && this.selected,\n            'mdc-ripple-surface--disabled': this.disabled,\n            'mdc-ripple-surface--hover': this.hovering,\n            'mdc-ripple-surface--primary': this.primary,\n            'mdc-ripple-surface--selected': this.selected,\n            'mdc-ripple-upgraded--background-focused': this.bgFocused,\n            'mdc-ripple-upgraded--foreground-activation': this.fgActivation,\n            'mdc-ripple-upgraded--foreground-deactivation': this.fgDeactivation,\n            'mdc-ripple-upgraded--unbounded': this.unbounded,\n            'mdc-ripple-surface--internal-use-state-layer-custom-properties': this.internalUseStateLayerCustomProperties,\n        };\n        return html `\n        <div class=\"mdc-ripple-surface mdc-ripple-upgraded ${classMap(classes)}\"\n          style=\"${styleMap({\n            '--mdc-ripple-fg-scale': this.fgScale,\n            '--mdc-ripple-fg-size': this.fgSize,\n            '--mdc-ripple-fg-translate-end': this.translateEnd,\n            '--mdc-ripple-fg-translate-start': this.translateStart,\n            '--mdc-ripple-left': this.leftPos,\n            '--mdc-ripple-top': this.topPos,\n        })}\"></div>`;\n    }\n}\n__decorate([\n    query('.mdc-ripple-surface')\n], RippleBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"primary\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"accent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"unbounded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"internalUseStateLayerCustomProperties\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"hovering\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"bgFocused\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgActivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgDeactivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgScale\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgSize\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateStart\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateEnd\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"leftPos\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"topPos\", void 0);\n//# sourceMappingURL=mwc-ripple-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { BaseElement } from '@material/mwc-base/base-element';\nimport { MDCNotchedOutlineFoundation } from '@material/notched-outline/foundation';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport class NotchedOutlineBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCNotchedOutlineFoundation;\n        this.width = 0;\n        this.open = false;\n        this.lastOpen = this.open;\n    }\n    createAdapter() {\n        return {\n            addClass: (className) => this.mdcRoot.classList.add(className),\n            removeClass: (className) => this.mdcRoot.classList.remove(className),\n            setNotchWidthProperty: (width) => this.notchElement.style.setProperty('width', `${width}px`),\n            removeNotchWidthProperty: () => this.notchElement.style.removeProperty('width'),\n        };\n    }\n    openOrClose(shouldOpen, width) {\n        if (!this.mdcFoundation) {\n            return;\n        }\n        if (shouldOpen && width !== undefined) {\n            this.mdcFoundation.notch(width);\n        }\n        else {\n            this.mdcFoundation.closeNotch();\n        }\n    }\n    render() {\n        this.openOrClose(this.open, this.width);\n        const classes = classMap({\n            'mdc-notched-outline--notched': this.open,\n        });\n        return html `\n      <span class=\"mdc-notched-outline ${classes}\">\n        <span class=\"mdc-notched-outline__leading\"></span>\n        <span class=\"mdc-notched-outline__notch\">\n          <slot></slot>\n        </span>\n        <span class=\"mdc-notched-outline__trailing\"></span>\n      </span>`;\n    }\n}\n__decorate([\n    query('.mdc-notched-outline')\n], NotchedOutlineBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Number })\n], NotchedOutlineBase.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], NotchedOutlineBase.prototype, \"open\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], NotchedOutlineBase.prototype, \"notchElement\", void 0);\n//# sourceMappingURL=mwc-notched-outline-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-notched-outline';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element';\nimport { observer } from '@material/mwc-base/observer';\nimport { floatingLabel } from '@material/mwc-floating-label';\nimport { lineRipple } from '@material/mwc-line-ripple';\nimport MDCTextFieldFoundation from '@material/textfield/foundation';\nimport { html } from 'lit';\nimport { eventOptions, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nconst passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];\nconst createValidityObj = (customValidity = {}) => {\n    /*\n     * We need to make ValidityState an object because it is readonly and\n     * we cannot use the spread operator. Also, we don't export\n     * `CustomValidityState` because it is a leaky implementation and the user\n     * already has access to `ValidityState` in lib.dom.ts. Also an interface\n     * {a: Type} can be casted to {readonly a: Type} so passing any object\n     * should be fine.\n     */\n    const objectifiedCustomValidity = {};\n    // eslint-disable-next-line guard-for-in\n    for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName] =\n            customValidity[propName];\n    }\n    return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);\n};\n/** @soyCompatible */\nexport class TextFieldBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.mdcFoundationClass = MDCTextFieldFoundation;\n        this.value = '';\n        this.type = 'text';\n        this.placeholder = '';\n        this.label = '';\n        this.icon = '';\n        this.iconTrailing = '';\n        this.disabled = false;\n        this.required = false;\n        this.minLength = -1;\n        this.maxLength = -1;\n        this.outlined = false;\n        this.helper = '';\n        this.validateOnInitialRender = false;\n        this.validationMessage = '';\n        this.autoValidate = false;\n        this.pattern = '';\n        this.min = '';\n        this.max = '';\n        /**\n         * step can be a number or the keyword \"any\".\n         *\n         * Use `String` typing to pass down the value as a string and let the native\n         * input cast internally as needed.\n         */\n        this.step = null;\n        this.size = null;\n        this.helperPersistent = false;\n        this.charCounter = false;\n        this.endAligned = false;\n        this.prefix = '';\n        this.suffix = '';\n        this.name = '';\n        this.readOnly = false;\n        this.autocapitalize = '';\n        this.outlineOpen = false;\n        this.outlineWidth = 0;\n        this.isUiValid = true;\n        this.focused = false;\n        this._validity = createValidityObj();\n        this.validityTransform = null;\n    }\n    get validity() {\n        this._checkValidity(this.value);\n        return this._validity;\n    }\n    get willValidate() {\n        return this.formElement.willValidate;\n    }\n    get selectionStart() {\n        return this.formElement.selectionStart;\n    }\n    get selectionEnd() {\n        return this.formElement.selectionEnd;\n    }\n    focus() {\n        const focusEvt = new CustomEvent('focus');\n        this.formElement.dispatchEvent(focusEvt);\n        this.formElement.focus();\n    }\n    blur() {\n        const blurEvt = new CustomEvent('blur');\n        this.formElement.dispatchEvent(blurEvt);\n        this.formElement.blur();\n    }\n    select() {\n        this.formElement.select();\n    }\n    setSelectionRange(selectionStart, selectionEnd, selectionDirection) {\n        this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n    }\n    update(changedProperties) {\n        if (changedProperties.has('autoValidate') && this.mdcFoundation) {\n            this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        }\n        if (changedProperties.has('value') && typeof this.value !== 'string') {\n            this.value = `${this.value}`;\n        }\n        super.update(changedProperties);\n    }\n    setFormData(formData) {\n        if (this.name) {\n            formData.append(this.name, this.value);\n        }\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n        const shouldRenderHelperText = !!this.helper || !!this.validationMessage || shouldRenderCharCounter;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field--disabled': this.disabled,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--filled': !this.outlined,\n            'mdc-text-field--outlined': this.outlined,\n            'mdc-text-field--with-leading-icon': this.icon,\n            'mdc-text-field--with-trailing-icon': this.iconTrailing,\n            'mdc-text-field--end-aligned': this.endAligned,\n        };\n        return html `\n      <label class=\"mdc-text-field ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderLeadingIcon()}\n        ${this.renderPrefix()}\n        ${this.renderInput(shouldRenderHelperText)}\n        ${this.renderSuffix()}\n        ${this.renderTrailingIcon()}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}\n    `;\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('value') &&\n            changedProperties.get('value') !== undefined) {\n            this.mdcFoundation.setValue(this.value);\n            if (this.autoValidate) {\n                this.reportValidity();\n            }\n        }\n    }\n    /** @soyTemplate */\n    renderRipple() {\n        return this.outlined ? '' : html `\n      <span class=\"mdc-text-field__ripple\"></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderOutline() {\n        return !this.outlined ? '' : html `\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n    }\n    /** @soyTemplate */\n    renderLabel() {\n        return !this.label ?\n            '' :\n            html `\n      <span\n          .floatingLabelFoundation=${floatingLabel(this.label)}\n          id=\"label\">${this.label}</span>\n    `;\n    }\n    /** @soyTemplate */\n    renderLeadingIcon() {\n        return this.icon ? this.renderIcon(this.icon) : '';\n    }\n    /** @soyTemplate */\n    renderTrailingIcon() {\n        return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';\n    }\n    /** @soyTemplate */\n    renderIcon(icon, isTrailingIcon = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__icon--leading': !isTrailingIcon,\n            'mdc-text-field__icon--trailing': isTrailingIcon\n        };\n        return html `<i class=\"material-icons mdc-text-field__icon ${classMap(classes)}\">${icon}</i>`;\n    }\n    /** @soyTemplate */\n    renderPrefix() {\n        return this.prefix ? this.renderAffix(this.prefix) : '';\n    }\n    /** @soyTemplate */\n    renderSuffix() {\n        return this.suffix ? this.renderAffix(this.suffix, true) : '';\n    }\n    /** @soyTemplate */\n    renderAffix(content, isSuffix = false) {\n        /** @classMap */\n        const classes = {\n            'mdc-text-field__affix--prefix': !isSuffix,\n            'mdc-text-field__affix--suffix': isSuffix\n        };\n        return html `<span class=\"mdc-text-field__affix ${classMap(classes)}\">\n        ${content}</span>`;\n    }\n    /** @soyTemplate */\n    renderInput(shouldRenderHelperText) {\n        const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n        const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n        const autocapitalizeOrUndef = this.autocapitalize ?\n            this.autocapitalize :\n            undefined;\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n        const ariaControlsOrUndef = shouldRenderHelperText ? 'helper-text' : undefined;\n        const ariaDescribedbyOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            'helper-text' :\n            undefined;\n        // TODO: live() directive needs casting for lit-analyzer\n        // https://github.com/runem/lit-analyzer/pull/91/files\n        // TODO: lit-analyzer labels min/max as (number|string) instead of string\n        return html `\n      <input\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          aria-controls=\"${ifDefined(ariaControlsOrUndef)}\"\n          aria-describedby=\"${ifDefined(ariaDescribedbyOrUndef)}\"\n          class=\"mdc-text-field__input\"\n          type=\"${this.type}\"\n          .value=\"${live(this.value)}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          pattern=\"${ifDefined(this.pattern ? this.pattern : undefined)}\"\n          min=\"${ifDefined(this.min === '' ? undefined : this.min)}\"\n          max=\"${ifDefined(this.max === '' ? undefined : this.max)}\"\n          step=\"${ifDefined(this.step === null ? undefined : this.step)}\"\n          size=\"${ifDefined(this.size === null ? undefined : this.size)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @focus=\"${this.onInputFocus}\"\n          @blur=\"${this.onInputBlur}\">`;\n    }\n    /** @soyTemplate */\n    renderLineRipple() {\n        return this.outlined ?\n            '' :\n            html `\n      <span .lineRippleFoundation=${lineRipple()}></span>\n    `;\n    }\n    /** @soyTemplate */\n    renderHelperText(shouldRenderHelperText, shouldRenderCharCounter) {\n        const showValidationMessage = this.validationMessage && !this.isUiValid;\n        /** @classMap */\n        const classes = {\n            'mdc-text-field-helper-text--persistent': this.helperPersistent,\n            'mdc-text-field-helper-text--validation-msg': showValidationMessage,\n        };\n        const ariaHiddenOrUndef = this.focused || this.helperPersistent || showValidationMessage ?\n            undefined :\n            'true';\n        const helperText = showValidationMessage ? this.validationMessage : this.helper;\n        return !shouldRenderHelperText ? '' : html `\n      <div class=\"mdc-text-field-helper-line\">\n        <div id=\"helper-text\"\n             aria-hidden=\"${ifDefined(ariaHiddenOrUndef)}\"\n             class=\"mdc-text-field-helper-text ${classMap(classes)}\"\n             >${helperText}</div>\n        ${this.renderCharCounter(shouldRenderCharCounter)}\n      </div>`;\n    }\n    /** @soyTemplate */\n    renderCharCounter(shouldRenderCharCounter) {\n        const length = Math.min(this.value.length, this.maxLength);\n        return !shouldRenderCharCounter ? '' : html `\n      <span class=\"mdc-text-field-character-counter\"\n            >${length} / ${this.maxLength}</span>`;\n    }\n    onInputFocus() {\n        this.focused = true;\n    }\n    onInputBlur() {\n        this.focused = false;\n        this.reportValidity();\n    }\n    checkValidity() {\n        const isValid = this._checkValidity(this.value);\n        if (!isValid) {\n            const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });\n            this.dispatchEvent(invalidEvent);\n        }\n        return isValid;\n    }\n    reportValidity() {\n        const isValid = this.checkValidity();\n        this.mdcFoundation.setValid(isValid);\n        this.isUiValid = isValid;\n        return isValid;\n    }\n    _checkValidity(value) {\n        const nativeValidity = this.formElement.validity;\n        let validity = createValidityObj(nativeValidity);\n        if (this.validityTransform) {\n            const customValidity = this.validityTransform(value, validity);\n            validity = Object.assign(Object.assign({}, validity), customValidity);\n            this.mdcFoundation.setUseNativeValidation(false);\n        }\n        else {\n            this.mdcFoundation.setUseNativeValidation(true);\n        }\n        this._validity = validity;\n        return this._validity.valid;\n    }\n    setCustomValidity(message) {\n        this.validationMessage = message;\n        this.formElement.setCustomValidity(message);\n    }\n    handleInputChange() {\n        this.value = this.formElement.value;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());\n    }\n    getRootAdapterMethods() {\n        return Object.assign({ registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler), deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler), registerValidationAttributeChangeHandler: (handler) => {\n                const getAttributesList = (mutationsList) => {\n                    return mutationsList.map((mutation) => mutation.attributeName)\n                        .filter((attributeName) => attributeName);\n                };\n                const observer = new MutationObserver((mutationsList) => {\n                    handler(getAttributesList(mutationsList));\n                });\n                const config = { attributes: true };\n                observer.observe(this.formElement, config);\n                return observer;\n            }, deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect() }, addHasRemoveClass(this.mdcRoot));\n    }\n    getInputAdapterMethods() {\n        return {\n            getNativeInput: () => this.formElement,\n            // since HelperTextFoundation is not used, aria-describedby a11y logic\n            // is implemented in render method instead of these adapter methods\n            setInputAttr: () => undefined,\n            removeInputAttr: () => undefined,\n            isFocused: () => this.shadowRoot ?\n                this.shadowRoot.activeElement === this.formElement :\n                false,\n            registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, { passive: evtType in passiveEvents }),\n            deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler),\n        };\n    }\n    getLabelAdapterMethods() {\n        return {\n            floatLabel: (shouldFloat) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.float(shouldFloat),\n            getLabelWidth: () => {\n                return this.labelElement ?\n                    this.labelElement.floatingLabelFoundation.getWidth() :\n                    0;\n            },\n            hasLabel: () => Boolean(this.labelElement),\n            shakeLabel: (shouldShake) => this.labelElement &&\n                this.labelElement.floatingLabelFoundation.shake(shouldShake),\n            setLabelRequired: (isRequired) => {\n                if (this.labelElement) {\n                    this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n                }\n            },\n        };\n    }\n    getLineRippleAdapterMethods() {\n        return {\n            activateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.activate();\n                }\n            },\n            deactivateLineRipple: () => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.deactivate();\n                }\n            },\n            setLineRippleTransformOrigin: (normalizedX) => {\n                if (this.lineRippleElement) {\n                    this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);\n                }\n            },\n        };\n    }\n    // tslint:disable:ban-ts-ignore\n    async getUpdateComplete() {\n        var _a;\n        // @ts-ignore\n        const result = await super.getUpdateComplete();\n        await ((_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete);\n        return result;\n    }\n    // tslint:enable:ban-ts-ignore\n    firstUpdated() {\n        var _a;\n        super.firstUpdated();\n        this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n        if (this.validateOnInitialRender) {\n            this.reportValidity();\n        }\n        // wait for the outline element to render to update the notch width\n        (_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete.then(() => {\n            var _a;\n            // `foundation.notchOutline()` assumes the label isn't floating and\n            // multiplies by a constant, but the label is already is floating at this\n            // stage, therefore directly set the outline width to the label width\n            this.outlineWidth =\n                ((_a = this.labelElement) === null || _a === void 0 ? void 0 : _a.floatingLabelFoundation.getWidth()) || 0;\n        });\n    }\n    getOutlineAdapterMethods() {\n        return {\n            closeOutline: () => this.outlineElement && (this.outlineOpen = false),\n            hasOutline: () => Boolean(this.outlineElement),\n            notchOutline: (labelWidth) => {\n                const outlineElement = this.outlineElement;\n                if (outlineElement && !this.outlineOpen) {\n                    this.outlineWidth = labelWidth;\n                    this.outlineOpen = true;\n                }\n            }\n        };\n    }\n    async layout() {\n        await this.updateComplete;\n        const labelElement = this.labelElement;\n        if (!labelElement) {\n            this.outlineOpen = false;\n            return;\n        }\n        const shouldFloat = !!this.label && !!this.value;\n        labelElement.floatingLabelFoundation.float(shouldFloat);\n        if (!this.outlined) {\n            return;\n        }\n        this.outlineOpen = shouldFloat;\n        await this.updateComplete;\n        /* When the textfield automatically notches due to a value and label\n         * being defined, the textfield may be set to `display: none` by the user.\n         * this means that the notch is of size 0px. We provide this function so\n         * that the user may manually resize the notch to the floated label's\n         * width.\n         */\n        const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n        if (this.outlineOpen) {\n            this.outlineWidth = labelWidth;\n            await this.updateComplete;\n        }\n    }\n}\n__decorate([\n    query('.mdc-text-field')\n], TextFieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], TextFieldBase.prototype, \"formElement\", void 0);\n__decorate([\n    query('.mdc-floating-label')\n], TextFieldBase.prototype, \"labelElement\", void 0);\n__decorate([\n    query('.mdc-line-ripple')\n], TextFieldBase.prototype, \"lineRippleElement\", void 0);\n__decorate([\n    query('mwc-notched-outline')\n], TextFieldBase.prototype, \"outlineElement\", void 0);\n__decorate([\n    query('.mdc-notched-outline__notch')\n], TextFieldBase.prototype, \"notchElement\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.label !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"label\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"iconTrailing\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], TextFieldBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"required\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"minLength\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"maxLength\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true }),\n    observer(function (_newVal, oldVal) {\n        if (oldVal !== undefined && this.outlined !== oldVal) {\n            this.layout();\n        }\n    })\n], TextFieldBase.prototype, \"outlined\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"helper\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"validateOnInitialRender\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"validationMessage\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"autoValidate\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"pattern\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"min\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"max\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"step\", void 0);\n__decorate([\n    property({ type: Number })\n], TextFieldBase.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"helperPersistent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"charCounter\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"endAligned\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"prefix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"suffix\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"inputMode\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TextFieldBase.prototype, \"readOnly\", void 0);\n__decorate([\n    property({ type: String })\n], TextFieldBase.prototype, \"autocapitalize\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineOpen\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"outlineWidth\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"isUiValid\", void 0);\n__decorate([\n    state()\n], TextFieldBase.prototype, \"focused\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], TextFieldBase.prototype, \"handleInputChange\", null);\n//# sourceMappingURL=mwc-textfield-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { addHasRemoveClass, BaseElement } from '@material/mwc-base/base-element';\nimport { supportsPassiveEventListener } from '@material/mwc-base/utils';\nimport { strings } from '@material/top-app-bar/constants';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport const passiveEventOptionsIfSupported = supportsPassiveEventListener ? { passive: true } : undefined;\nexport class TopAppBarBaseBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.centerTitle = false;\n        this.handleTargetScroll = () => {\n            this.mdcFoundation.handleTargetScroll();\n        };\n        this.handleNavigationClick = () => {\n            this.mdcFoundation.handleNavigationClick();\n        };\n    }\n    get scrollTarget() {\n        return this._scrollTarget || window;\n    }\n    set scrollTarget(value) {\n        this.unregisterScrollListener();\n        const old = this.scrollTarget;\n        this._scrollTarget = value;\n        this.updateRootPosition();\n        this.requestUpdate('scrollTarget', old);\n        this.registerScrollListener();\n    }\n    updateRootPosition() {\n        if (this.mdcRoot) {\n            const windowScroller = this.scrollTarget === window;\n            // we add support for top-app-bar's tied to an element scroller.\n            this.mdcRoot.style.position = windowScroller ? '' : 'absolute';\n        }\n    }\n    render() {\n        // clang-format off\n        let title = html `<span class=\"mdc-top-app-bar__title\"><slot name=\"title\"></slot></span>`;\n        if (this.centerTitle) {\n            title = html `<section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-center\">${title}</section>`;\n        }\n        // clang-format on\n        return html `\n      <header class=\"mdc-top-app-bar ${classMap(this.barClasses())}\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\" id=\"navigation\">\n          <slot name=\"navigationIcon\"\n            @click=${this.handleNavigationClick}></slot>\n          ${this.centerTitle ? null : title}\n        </section>\n        ${this.centerTitle ? title : null}\n        <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\" id=\"actions\" role=\"toolbar\">\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>\n    <div class=\"${classMap(this.contentClasses())}\">\n      <slot></slot>\n    </div>\n    `;\n    }\n    createAdapter() {\n        return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { setStyle: (property, value) => this.mdcRoot.style.setProperty(property, value), getTopAppBarHeight: () => this.mdcRoot.clientHeight, notifyNavigationIconClicked: () => {\n                this.dispatchEvent(new Event(strings.NAVIGATION_EVENT, { bubbles: true, cancelable: true }));\n            }, getViewportScrollY: () => this.scrollTarget instanceof Window ?\n                this.scrollTarget.pageYOffset :\n                this.scrollTarget.scrollTop, getTotalActionItems: () => this._actionItemsSlot\n                .assignedNodes({ flatten: true })\n                .length });\n    }\n    registerListeners() {\n        this.registerScrollListener();\n    }\n    unregisterListeners() {\n        this.unregisterScrollListener();\n    }\n    registerScrollListener() {\n        this.scrollTarget.addEventListener('scroll', this.handleTargetScroll, passiveEventOptionsIfSupported);\n    }\n    unregisterScrollListener() {\n        this.scrollTarget.removeEventListener('scroll', this.handleTargetScroll);\n    }\n    firstUpdated() {\n        super.firstUpdated();\n        this.updateRootPosition();\n        this.registerListeners();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.unregisterListeners();\n    }\n}\n__decorate([\n    query('.mdc-top-app-bar')\n], TopAppBarBaseBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('slot[name=\"actionItems\"]')\n], TopAppBarBaseBase.prototype, \"_actionItemsSlot\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TopAppBarBaseBase.prototype, \"centerTitle\", void 0);\n__decorate([\n    property({ type: Object })\n], TopAppBarBaseBase.prototype, \"scrollTarget\", null);\n//# sourceMappingURL=mwc-top-app-bar-base-base.js.map"],"names":[],"sourceRoot":""}